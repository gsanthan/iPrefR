package verify;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

import model.OutcomeSequence;
import model.PreferenceMetaData;
import util.StringUtil;
import exception.PreferenceReasonerException;

/**
 * A parser for traces generated by Cadence SMV model checker.
 * @author gsanthan
 *
 */
public class CadenceSMVTraceFormatter implements TraceFormatter {

	/*
	 * (non-Javadoc)
	 * @see verify.TraceFormatter#parseCycleFromTrace(model.PreferenceMetaData)
	 */
	public OutcomeSequence parseCycleFromTrace(PreferenceMetaData pmd) throws FileNotFoundException, IOException, PreferenceReasonerException {
		BufferedReader reader = new BufferedReader(new FileReader(pmd.getCounterExampleFile()));
		OutcomeSequence c = new OutcomeSequence();
		String nextLine = null;
		Set<String> outcome = new HashSet<String>();
		boolean loopStarted = false;
		try{
		while ((nextLine = reader.readLine())!=null){
			if (nextLine.indexOf("/* loop begins here") != -1) {
				loopStarted = true;
				break;
			}
		}
		
		if(loopStarted) {
			while ((nextLine = reader.readLine()) != null) {
				if (nextLine.indexOf("/* state ") != -1) {
					outcome = parseOutcome(pmd, reader, nextLine);
					c.addOutcome(outcome);
				} else if (nextLine.indexOf("/* loop back to state ") != -1) {
					break;
				}
			}
		}
		}finally{reader.close();}
		return c;
	}

	/*
	 * (non-Javadoc)
	 * @see verify.TraceFormatter#parsePathFromTrace(model.PreferenceMetaData)
	 */
	public OutcomeSequence parsePathFromTrace(PreferenceMetaData pmd) throws FileNotFoundException, IOException, PreferenceReasonerException {
		BufferedReader reader = new BufferedReader(new FileReader(pmd.getCounterExampleFile()));
		OutcomeSequence c = new OutcomeSequence();
		String nextLine = null;
		Set<String> outcome = new HashSet<String>();
		try{
			while ((nextLine = reader.readLine()) != null) {
				if (nextLine.indexOf("/* state ") != -1) {
					outcome = parseOutcome(pmd, reader, nextLine);
					c.addOutcome(outcome);
				} else if (nextLine.indexOf("/* loop back to state ") != -1) {
					break;
				}
			}
		
		} finally {
			reader.close();
		}
		return c;
	}
	
	/**
	 * Parses and returns an outcome by making delta changes to the previously parsed outcome from the current position of the BufferedReader
	 * @param pmd
	 * @param reader
	 * @param line
	 * @return
	 * @throws IOException
	 */
	private Set<String> parseOutcome(PreferenceMetaData pmd, BufferedReader reader, String line) throws IOException {
		Set<String> outcome = new HashSet<String>();// First state/outcome in the trace
		
		do {
			for (String var : pmd.getNamesOfVariables()) {
				if (line.indexOf("\\" + var + "  = ") != -1) {
					
					line = line.replaceAll("\\\\", "");
					line = line.replaceAll("\\,", "");
					line = line.trim();
					/**
					 * Modified March 6 2014 : Get the full assignment, not just sets of namesOfVariables that hold true in the state 
					 */
					if(line.length() > 1) {
						outcome.add(line);
					}
					/*
					String varValuation = nextLine.substring(nextLine.indexOf("=") + 2);
					if (varValuation.equalsIgnoreCase("1") || varValuation.equalsIgnoreCase("TRUE")) {
						outcome.add(var);
						// variableAssigned = true;//This means there is a new outcome to be added
					} else if (varValuation.equalsIgnoreCase("0") || varValuation.equalsIgnoreCase("FALSE")) {
						outcome.remove(var);
						// variableAssigned = true;//This means there is a new outcome to be added
					}
					
					if (varValuation.startsWith("1") || varValuation.startsWith("TRUE")) {
						outcome.add(var);
						// variableAssigned = true;//This means there is a new outcome to be added
					} else if (varValuation.startsWith("0") || varValuation.startsWith("FALSE")) {
						outcome.remove(var);
						// variableAssigned = true;//This means there is a new outcome to be added
					}*/
				}
			}
			line = reader.readLine();
		} while (line != null && !line.startsWith("}"));
		return outcome;
	}
	
	/**
	 * Parses and returns an outcome by making delta changes to the previously parsed outcome from the current position of the BufferedReader.
	 * Takes into account change namesOfVariables as part of the outcome description.
	 * @param pmd
	 * @param reader
	 * @param line
	 * @return
	 * @throws IOException
	 */
	private Set<String> parseOutcomeWithChangeVariables(PreferenceMetaData pmd, BufferedReader reader, String line) throws IOException {
		Set<String> outcome = new HashSet<String>();// First state/outcome in the trace
		
		do {
			for (String var : pmd.getNamesOfVariables()) {
				if (line.indexOf("\\" + var + "  = ") != -1) {
					line = line.trim();
					String varValuation = line.substring(line.indexOf("=") + 2);
					if (varValuation.startsWith("1") || varValuation.startsWith("TRUE")) {
						outcome.add(var);
						// variableAssigned = true;//This means there is a new outcome to be added
					} else if (varValuation.startsWith("0") || varValuation.startsWith("FALSE")) {
						outcome.remove(var);
						// variableAssigned = true;//This means there is a new outcome to be added
					}
				}
				
				
				//Look for change namesOfVariables
				if (line.indexOf("\\ch" + var + "  = ") != -1) {
					line = line.trim();
					String varValuation = line.substring(line.indexOf("=") + 2);
					if (varValuation.startsWith("1") || varValuation.startsWith("TRUE")) {
						outcome.add("ch"+var);
						// variableAssigned = true;//This means there is a new outcome to be added
					} else if (varValuation.startsWith("0") || varValuation.startsWith("FALSE")) {
						outcome.remove("ch"+var);
						// variableAssigned = true;//This means there is a new outcome to be added
					}
				}
				
			}
			line = reader.readLine();
		} while (line != null && !line.startsWith("}"));
		return outcome;
	}
	
	/*
	 * (non-Javadoc)
	 * @see verify.TraceFormatter#parseCounterExampleFromTrace(model.PreferenceMetaData)
	 */
	public String[] parseCounterExampleFromTrace(PreferenceMetaData pmd, boolean firstStateOnly) throws FileNotFoundException, IOException {
		Set<String> outcome = new HashSet<String>();// First state/outcome in the trace
		BufferedReader reader = new BufferedReader(new FileReader(pmd.getCounterExampleFile()));
		String nextLine = "";
		try{
		while ((nextLine = reader.readLine()) != null) {
			if (nextLine.indexOf("/* state ") != -1) {
				outcome = parseOutcome(pmd, reader, nextLine);
				if(firstStateOnly) {
					break;
				}
				// Otherwise, don't stop with the first outcome in the counter example file. 
				// If the counter example is a path, we will return the last outcome in the path.  
			}
		}
		}finally{reader.close();}
		return outcome.toArray(new String[]{});
	}
	
	/*
	 * (non-Javadoc)
	 * @see verify.TraceFormatter#parseCounterExampleWithChangeVariablesFromTrace(model.PreferenceMetaData)
	 */
	public String[] parseCounterExampleWithChangeVariablesFromTrace(PreferenceMetaData pmd) throws FileNotFoundException, IOException {
		Set<String> outcome = new HashSet<String>();// First state/outcome in the trace
		BufferedReader reader = new BufferedReader(new FileReader(pmd.getCounterExampleFile()));
		String nextLine = "";
		try{
		while ((nextLine = reader.readLine()) != null) {
			if (nextLine.indexOf("/* state ") != -1) {
				outcome = parseOutcomeWithChangeVariables(pmd, reader, nextLine);
//				break; // Don't stop with the first outcome in the counter example file. 
				// If the counter example is a path, we will return the last outcome in the path.  
			}
		}
		}finally{reader.close();}
		return outcome.toArray(new String[]{});
	}
	
	/*
	 * (non-Javadoc)
	 * @see verify.TraceFormatter#formatResults(java.lang.String)
	 */
	public String formatResults(String fileName) throws IOException {
		BufferedReader reader = new BufferedReader (new FileReader(fileName));
		String line;
		String result = "";
		float userTime = 0;
		float systemTime = 0;
		int bddNodes = 0;
		String formatted = "";
		try{
		while((line = reader.readLine())!=null) {
				if(line.startsWith("Model checking results")) {
					line = reader.readLine();
					line = reader.readLine();
					if(line.endsWith("true")) {
						result = "true";
					} else if(line.endsWith("false")) {
						result = "false";
					}
				}
				
				if(line.startsWith("Resources used")) {
					while((line = reader.readLine())!=null) {
						if(line.startsWith("user time")) {
							int startIndex = line.lastIndexOf("..")+2;
							int endIndex = line.lastIndexOf(" s");
							String sub = line.substring(startIndex, endIndex);
							userTime += Float.parseFloat(sub.trim());
						} else if(line.startsWith("system time")) {
							int startIndex = line.lastIndexOf("..")+2;
							int endIndex = line.lastIndexOf(" s");
							String sub = line.substring(startIndex, endIndex);
							systemTime += Float.parseFloat(sub.trim());
						} else if(line.startsWith("BDD nodes allocated")) {
							int startIndex = line.lastIndexOf("..")+2;
							String sub = line.substring(startIndex, line.length());
							bddNodes += Float.parseFloat(sub.trim());
							break;
						}
					}
				}	
			}
		formatted = formatted + StringUtil.padWithSpace(result+"",7)+"     ";
		formatted = formatted + StringUtil.padWithRightSpace(""+(userTime),15) + StringUtil.padWithRightSpace(""+(systemTime),15) + StringUtil.padWithRightSpace(""+(bddNodes),15);
		formatted = formatted + "       " + fileName.substring(fileName.lastIndexOf("\\")+1);
		}finally{		reader.close();	}
		
		return formatted;
	}
	
	
}


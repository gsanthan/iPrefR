package verify;

import java.io.FileNotFoundException;
import java.io.IOException;

import model.OutcomeSequence;
import model.PerformanceRecord;
import model.PreferenceMetaData;


/**
 * Defines methods to parse the output generated by the model checker into outcome(s), flip(s), cycle(s), etc. in the induced preference graph    
 * @author gsanthan
 *
 */
public interface TraceFormatter {
	/**
	 * Parses an OutcomeSequence representing a directed path (flipping sequence) in the induced preference graph from the trace generated by the model checker 
	 * @param pmd
	 * @return OutcomeSequence representing a flipping sequence 
	 * @throws FileNotFoundException
	 * @throws IOException
	 */
	public OutcomeSequence parsePathFromTrace(PreferenceMetaData pmd) throws FileNotFoundException, IOException;
	/**
	 * Parses an OutcomeSequence representing a cycle (of flips) in the induced preference graph from the trace generated by the model checker
	 * @param pmd
	 * @return OutcomeSequence representing a cycle (of flips)
	 * @throws FileNotFoundException
	 * @throws IOException
	 */
	public OutcomeSequence parseCycleFromTrace(PreferenceMetaData pmd) throws FileNotFoundException, IOException;
	/**
	 * Parses a String array representing an outcome in the induced preference graph from the trace generated by the model checker
	 * @param pmd
	 * @param firstStateOnly
	 * @return String array representing an outcome
	 * @throws FileNotFoundException
	 * @throws IOException
	 */
	public String[] parseCounterExampleFromTrace(PreferenceMetaData pmd, boolean firstStateOnly) throws FileNotFoundException, IOException;
	/**
	 * Parses a String array representing a state in the model (preference variables and change variables)  from the trace generated by the model checker
	 * @param pmd
	 * @return String array representing a state in the model
	 * @throws FileNotFoundException
	 * @throws IOException
	 */
	public String[] parseCounterExampleWithChangeVariablesFromTrace(PreferenceMetaData pmd) throws FileNotFoundException, IOException;
	/**
	 * Formats the performance statistics (currently implemented only for CadenceSMVTraceFormatter) from the trace generated by the model checker
	 * @param fileName File containing the trace generated by the model checker
	 * @return String containing performance statistics 
	 * @throws IOException
	 */
	public String formatResults(String fileName) throws IOException;
	/**
	 * Returns a PerformanceRecord object that contains the performance statistics
	 * @param fileName File containing the trace generated by the model checker
	 * @return PerformanceRecord object containing performance statistics 
	 * @throws IOException
	 */
	public PerformanceRecord getPerformanceRecord(String fileName) throws IOException;
}

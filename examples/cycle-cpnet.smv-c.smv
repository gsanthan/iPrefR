MODULE main

VAR
  a : {0,1};
  b : {0,1};
  c : {0,1};
  cha : {0,1};
  chb : {0,1};
  chc : {0,1};
  gch : {0,1};

DEFINE
  change := cha | chb | chc;

ASSIGN
  init(cha) := 0;
  next(a) :=
    case
      -- conditional preference: a depends on []
      a=1 & cha=1 & chb=0 & chc=0 : 0;
      -- relative importance interpreted according to Wilson's semantics:
      -- relative importance: a >> []
      -- relative importance: a << []
      1 : a;
    esac;
  init(chb) := 0;
  next(b) :=
    case
      -- conditional preference: b depends on [c]
      b=0 & c=0 & chb=1 & cha=0 & chc=0 : 1;
      -- relative importance interpreted according to Wilson's semantics:
      -- relative importance: b >> []
      -- relative importance: b << []
      1 : b;
    esac;
  init(chc) := 0;
  next(c) :=
    case
      -- conditional preference: c depends on [b, a]
      c=1 & b=0 & chc=1 & cha=0 & chb=0 : 0;
      c=0 & a=0 & chc=1 & cha=0 & chb=0 : 1;
      -- relative importance interpreted according to Wilson's semantics:
      -- relative importance: c >> []
      -- relative importance: c << []
      1 : c;
    esac;
  init(gch) := 0;
  next(gch) :=
    case
      -- conditional preference: a depends on []
      a=1 & cha=1 & chb=0 & chc=0  & change : 1;
      -- relative importance interpreted according to Wilson's semantics:
      -- relative importance: a >> []
      -- relative importance: a << []
      -- conditional preference: b depends on [c]
      b=0 & c=0 & chb=1 & cha=0 & chc=0  & change : 1;
      -- relative importance interpreted according to Wilson's semantics:
      -- relative importance: b >> []
      -- relative importance: b << []
      -- conditional preference: c depends on [b, a]
      c=1 & b=0 & chc=1 & cha=0 & chb=0  & change : 1;
      c=0 & a=0 & chc=1 & cha=0 & chb=0  & change : 1;
      -- relative importance interpreted according to Wilson's semantics:
      -- relative importance: c >> []
      -- relative importance: c << []
      TRUE: 0;
    esac;

INVAR !(a=0 & b=1 & c=1)

INVAR !(a=0 & b=1 & c=1)

INVAR !(a=1 & b=1 & c=1)

INVAR !(a=0 & b=1 & c=0)

INVAR !(a=1 & b=1 & c=1)

INVAR !(a=0 & b=1 & c=0)

INVAR !(a=1 & b=1 & c=0)

INVAR !(a=1 & b=1 & c=0)

SPEC EF (gch=1)
